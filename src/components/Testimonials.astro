---
import { companyData } from '../data/data.js';

const { testimonials } = companyData;
---

<section id="testimonios" class="py-32 relative overflow-hidden bg-gradient-to-b from-white to-gray-50">
  <!-- Patrón de fondo -->
  <div class="absolute inset-0 bg-grid-pattern opacity-[0.03]"></div>
  
  <!-- Formas decorativas -->
  <div class="absolute top-20 right-0 w-72 h-72 bg-primary/5 rounded-full blur-3xl"></div>
  <div class="absolute bottom-20 left-0 w-96 h-96 bg-secondary/5 rounded-full blur-3xl"></div>

  <div class="container mx-auto px-6 relative">
    <!-- Encabezado -->
    <div class="text-center mb-20">
      <div class="inline-flex items-center bg-primary/5 rounded-full px-6 py-2 mb-6">
        <svg class="w-5 h-5 text-primary mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
        </svg>
        <span class="text-primary/90 text-sm font-medium">Testimonios Verificados</span>
      </div>
      <h2 class="text-4xl md:text-5xl font-bold mb-6 text-gray-900 testimonials-title">
        Lo que dicen nuestros clientes
      </h2>
      <p class="text-xl text-gray-600 max-w-3xl mx-auto testimonials-subtitle font-light">
        Experiencias reales de empresas que han transformado su negocio con nosotros
      </p>
    </div>
    
    <!-- Contenedor del carrusel con padding extra -->
    <div class="relative max-w-[90rem] mx-auto">
      <div class="testimonials-carousel overflow-hidden px-4">
        <div class="flex testimonials-track">
          {testimonials.map((testimonial, index) => (
            <div class="testimonial-card w-full md:w-1/2 lg:w-1/3 flex-shrink-0 px-3" data-index={index}>
              <div class="bg-white p-8 rounded-2xl shadow-sm border border-gray-100 hover:shadow-lg transition-all duration-300 h-full flex flex-col group">
                <!-- Cabecera del testimonial -->
                <div class="flex items-center mb-6">
                  <div class="relative">
                    <div class="w-14 h-14 bg-gradient-to-br from-primary/10 to-secondary/10 rounded-xl flex items-center justify-center transform rotate-3 transition-transform group-hover:rotate-6">
                      <span class="text-2xl font-bold text-primary transform -rotate-3 group-hover:-rotate-6 transition-transform">
                        {testimonial.name.charAt(0)}
                      </span>
                    </div>
                    <div class="absolute -inset-1 bg-gradient-to-br from-primary/20 to-secondary/20 rounded-xl blur opacity-0 group-hover:opacity-70 transition-opacity"></div>
                  </div>
                  <div class="ml-4">
                    <h3 class="font-bold text-lg text-gray-900">{testimonial.name}</h3>
                    <p class="text-gray-500 text-sm">{testimonial.position}</p>
                  </div>
                </div>

                <!-- Contenido del testimonial -->
                <div class="mb-6 flex-grow">
                  <svg class="w-8 h-8 text-primary/10 mb-4" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M14.017 21v-7.391c0-5.704 3.731-9.57 8.983-10.609l.995 2.151c-2.432.917-3.995 3.638-3.995 5.849h4v10h-9.983zm-14.017 0v-7.391c0-5.704 3.748-9.57 9-10.609l.996 2.151c-2.433.917-3.996 3.638-3.996 5.849h3.983v10h-9.983z" />
                  </svg>
                  <p class="text-gray-600 leading-relaxed line-clamp-4">{testimonial.content}</p>
                </div>

                <!-- Calificación -->
                <div class="flex items-center justify-between mt-auto pt-4 border-t border-gray-100">
                  <div class="flex text-yellow-400">
                    {[...Array(5)].map((_, i) => (
                      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                      </svg>
                    ))}
                  </div>
                  <span class="text-sm text-gray-400">Hace {index + 1} {index === 0 ? 'semana' : 'semanas'}</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Indicadores de página -->
      <div class="flex justify-center mt-8 gap-2">
        {testimonials.map((_, index) => (
          <button 
            class="w-2 h-2 rounded-full bg-gray-300 transition-all duration-300 indicator-dot" 
            data-index={index}
            aria-label={`Ir al testimonio ${index + 1}`}
          ></button>
        ))}
      </div>
    </div>
  </div>
</section>

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';
  
  gsap.registerPlugin(ScrollTrigger);
  
  document.addEventListener('DOMContentLoaded', () => {
    // Animaciones de entrada
    const tl = gsap.timeline({
      scrollTrigger: {
        trigger: '#testimonios',
        start: 'top 80%',
        toggleActions: 'play none none reverse'
      }
    });

    tl.from('.testimonials-title', {
      y: 30,
      opacity: 0,
      duration: 0.8
    })
    .from('.testimonials-subtitle', {
      y: 20,
      opacity: 0,
      duration: 0.6
    }, '-=0.4');

    // Animación de las tarjetas
    gsap.from('.testimonial-card', {
      y: 40,
      opacity: 0,
      duration: 0.8,
      stagger: 0.2,
      scrollTrigger: {
        trigger: '.testimonials-carousel',
        start: 'top 80%'
      }
    });

    // Lógica del carrusel automático
    const track = document.querySelector('.testimonials-track') as HTMLElement;
    const cards = document.querySelectorAll('.testimonial-card') as NodeListOf<HTMLElement>;
    const indicators = document.querySelectorAll('.indicator-dot') as NodeListOf<HTMLElement>;
    
    let currentIndex = 0;
    let cardsPerView = getCardsPerView();
    let autoplayInterval: number;
    let isHovered = false;
    
    function getCardsPerView() {
      return window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
    }

    function getTotalSlides() {
      return Math.ceil(cards.length / cardsPerView);
    }
    
    function updateCarousel(index: number) {
      const totalSlides = getTotalSlides();
      currentIndex = (index + totalSlides) % totalSlides;
      
      const containerWidth = track.parentElement?.offsetWidth || 0;
      const offset = -currentIndex * containerWidth;
      
      // Actualizar indicadores
      indicators.forEach((dot, i) => {
        if (i < totalSlides) {
          dot.style.display = 'block';
          if (i === currentIndex) {
            dot.classList.add('bg-primary', 'w-6');
            dot.classList.remove('bg-gray-300', 'w-2');
          } else {
            dot.classList.remove('bg-primary', 'w-6');
            dot.classList.add('bg-gray-300', 'w-2');
          }
        } else {
          dot.style.display = 'none';
        }
      });
      
      gsap.to(track, {
        x: offset,
        duration: 0.8,
        ease: 'power3.out'
      });
    }

    function startAutoplay() {
      if (autoplayInterval) clearInterval(autoplayInterval);
      autoplayInterval = window.setInterval(() => {
        if (!isHovered) {
          updateCarousel(currentIndex + 1);
        }
      }, 5000);
    }

    // Event listeners
    const carousel = document.querySelector('.testimonials-carousel');
    carousel?.addEventListener('mouseenter', () => {
      isHovered = true;
    });
    
    carousel?.addEventListener('mouseleave', () => {
      isHovered = false;
    });

    indicators.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        updateCarousel(index);
        // Reiniciar el autoplay cuando se hace clic en un indicador
        startAutoplay();
      });
    });

    let resizeTimeout: number;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = window.setTimeout(() => {
        const newCardsPerView = getCardsPerView();
        if (newCardsPerView !== cardsPerView) {
          cardsPerView = newCardsPerView;
          // Ajustar el índice actual si es necesario
          currentIndex = Math.min(currentIndex, getTotalSlides() - 1);
          updateCarousel(currentIndex);
          startAutoplay();
        }
      }, 100);
    });
    
    // Iniciar carrusel
    updateCarousel(0);
    startAutoplay();

    // Limpiar el intervalo cuando se desmonta el componente
    return () => {
      if (autoplayInterval) {
        clearInterval(autoplayInterval);
      }
    };
  });
</script>

<style>
  .bg-grid-pattern {
    background-size: 30px 30px;
    background-image: 
      linear-gradient(to right, rgba(0, 0, 0, 0.05) 1px, transparent 1px),
      linear-gradient(to bottom, rgba(0, 0, 0, 0.05) 1px, transparent 1px);
  }

  .testimonials-carousel {
    position: relative;
  }
  
  .testimonials-track {
    display: flex;
    gap: 1.5rem;
    transition: transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    padding: 1rem;
  }

  .indicator-dot {
    transition: all 0.3s ease;
  }
  
  @media (max-width: 768px) {
    .testimonials-track {
      gap: 1rem;
    }
  }
</style> 