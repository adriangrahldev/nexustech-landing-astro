---
import { companyData } from '../data/data.js';

const { testimonials } = companyData;
---

<section id="testimonios" class="py-20 bg-gray-50">
  <div class="container mx-auto px-6">
    <div class="text-center mb-16">
      <h2 class="text-4xl font-bold mb-4 testimonials-title">Lo que dicen nuestros clientes</h2>
      <p class="text-xl text-gray-600 max-w-3xl mx-auto testimonials-subtitle">
        Experiencias reales de empresas que han transformado su negocio con nosotros
      </p>
    </div>
    
    <div class="relative px-4">
      <div class="testimonials-carousel overflow-hidden  px-14">
        <div class="flex testimonials-track py-4 px-14 justify-center ">
          {testimonials.map((testimonial, index) => (
            <div class="w-full md:w-1/2 lg:w-1/3 flex-shrink-0 px-0 testimonial-card" data-index={index}>
              <div class="bg-white p-8 rounded-xl shadow-md">
                <div class="flex items-center mb-6">
                  <div class="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mr-4">
                    <span class="text-xl font-bold text-primary">
                      {testimonial.name.charAt(0)}
                    </span>
                  </div>
                  <div>
                    <h3 class="font-semibold text-lg">{testimonial.name}</h3>
                    <p class="text-gray-600">{testimonial.position}</p>
                  </div>
                </div>
                <p class="text-gray-600 mb-6 line-clamp-3">{testimonial.content}</p>
                <div class="flex text-yellow-400">
                  {[...Array(5)].map((_, i) => (
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                    </svg>
                  ))}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      <button 
        class="absolute left-2 top-1/2 transform -translate-y-1/2 bg-white w-10 h-10 rounded-full shadow-md flex items-center justify-center text-gray-600 prev-button disabled:opacity-40 disabled:cursor-not-allowed z-10" 
        aria-label="Anterior"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      
      <button 
        class="absolute right-2 top-1/2 transform -translate-y-1/2 bg-white w-10 h-10 rounded-full shadow-md flex items-center justify-center text-gray-600 next-button disabled:opacity-40 disabled:cursor-not-allowed z-10" 
        aria-label="Siguiente"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
    </div>
  </div>
</section>

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';
  
  gsap.registerPlugin(ScrollTrigger);
  
  document.addEventListener('DOMContentLoaded', () => {
    const track = document.querySelector('.testimonials-track') as HTMLElement;
    const cards = document.querySelectorAll('.testimonial-card') as NodeListOf<HTMLElement>;
    const prevButton = document.querySelector('.prev-button') as HTMLButtonElement;
    const nextButton = document.querySelector('.next-button') as HTMLButtonElement;
    
    let currentIndex = 0;
    let cardsPerView = getCardsPerView();
    
    function getCardsPerView() {
      return window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1;
    }
    
    function updateCarousel() {
      const totalGroups = Math.ceil(cards.length / cardsPerView);
      const maxIndex = totalGroups - 1;
      currentIndex = Math.max(0, Math.min(currentIndex, maxIndex));
      
      const containerWidth = track.parentElement?.offsetWidth || 0;
      const offset = -currentIndex * containerWidth;
      
      gsap.to(track, {
        x: offset,
        duration: 0.4,
        ease: 'power2.out'
      });
      
      prevButton.disabled = currentIndex === 0;
      nextButton.disabled = currentIndex >= maxIndex;
    }
    
    prevButton.addEventListener('click', () => {
      if (currentIndex > 0) {
        currentIndex--;
        updateCarousel();
      }
    });
    
    nextButton.addEventListener('click', () => {
      const totalGroups = Math.ceil(cards.length / cardsPerView);
      if (currentIndex < totalGroups - 1) {
        currentIndex++;
        updateCarousel();
      }
    });
    
    let resizeTimeout: number;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = window.setTimeout(() => {
        const newCardsPerView = getCardsPerView();
        if (newCardsPerView !== cardsPerView) {
          cardsPerView = newCardsPerView;
          currentIndex = 0;
          updateCarousel();
        }
      }, 100);
    });
    
    updateCarousel();
  });
</script>

<style>
  .testimonials-carousel {
    position: relative;
  }
  
  .testimonials-track {
    display: flex;
    gap: 2rem;
    transition: transform 0.4s ease;
  }
  
  @media (max-width: 768px) {
    .prev-button {
      left: 1rem;
    }
    .next-button {
      right: 1rem;
    }
  }
</style> 