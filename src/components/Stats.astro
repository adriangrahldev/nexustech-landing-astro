---
import { companyData } from '../data/data.js';

const { stats } = companyData;
---

<section id="estadisticas" class="py-20 bg-white text-white relative">
  <div class="absolute inset-0 bg-primary rounded-b-[30px]"></div>
  <div class="container mx-auto px-6">
    <div class="text-center mb-16">
      <h2 class="text-4xl font-bold mb-4 stats-title">Nuestro Impacto</h2>
      <p class="text-xl text-white/80 max-w-3xl mx-auto stats-subtitle">
        Cifras que demuestran nuestro compromiso con la excelencia
      </p>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-4 gap-8">
      {stats.map((stat, index) => (
        <div class="text-center stat-card" data-index={index}>
          <div class="text-5xl font-bold mb-2 stat-value" data-value={stat.value}>
            0
          </div>
          <div class="text-xl text-white/80 stat-label">{stat.label}</div>
        </div>
      ))}
    </div>
  </div>
</section>

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';
  
  gsap.registerPlugin(ScrollTrigger);
  
  document.addEventListener('DOMContentLoaded', () => {
    // Animate section title and subtitle
    gsap.from('.stats-title', {
      y: 50,
      opacity: 0,
      duration: 0.8,
      scrollTrigger: {
        trigger: '.stats-title',
        start: 'top 80%',
        toggleActions: 'play none none reverse'
      }
    });
    
    gsap.from('.stats-subtitle', {
      y: 30,
      opacity: 0,
      duration: 0.8,
      delay: 0.2,
      scrollTrigger: {
        trigger: '.stats-subtitle',
        start: 'top 80%',
        toggleActions: 'play none none reverse'
      }
    });
    
    // Animate stat cards
    const statCards = document.querySelectorAll('.stat-card');
    
    statCards.forEach((card, index) => {
      gsap.from(card, {
        y: 50,
        opacity: 0,
        duration: 0.8,
        delay: index * 0.2,
        scrollTrigger: {
          trigger: card,
          start: 'top 80%',
          toggleActions: 'play none none reverse'
        }
      });
    });
    
    // Animate stat values
    const statValues = document.querySelectorAll('.stat-value') as NodeListOf<HTMLElement>;
    
    statValues.forEach(stat => {
      const targetValue = parseInt(stat.dataset.value || '0');
      const duration = 2;
      const steps = 60;
      const stepValue = targetValue / steps;
      let currentStep = 0;
      
      ScrollTrigger.create({
        trigger: stat,
        start: 'top 80%',
        onEnter: () => {
          const interval = setInterval(() => {
            currentStep++;
            const currentValue = Math.round(stepValue * currentStep);
            stat.textContent = currentValue.toLocaleString();
            
            if (currentStep >= steps) {
              clearInterval(interval);
              stat.textContent = targetValue.toLocaleString();
            }
          }, duration * 1000 / steps);
        }
      });
    });
  });
</script>

<style>
  .stat-card {
    padding: 2rem;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 1rem;
    backdrop-filter: blur(10px);
    transition: transform 0.3s ease, background-color 0.3s ease;
  }
  
  .stat-card:hover {
    transform: translateY(-5px);
    background: rgba(255, 255, 255, 0.15);
  }
  
  .stat-value {
    background: linear-gradient(45deg, #fff, #e2e8f0);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
</style> 