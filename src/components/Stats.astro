---
import { companyData } from '../data/data.js';

const { stats } = companyData;
---

<section id="estadisticas" class="py-24 relative overflow-hidden">
  <!-- Fondo con gradiente y patrón -->
  <div class="absolute inset-0 bg-gradient-to-br from-primary via-primary to-secondary"></div>
  <div class="absolute inset-0 bg-noise opacity-[0.15]"></div>
  
  <!-- Formas decorativas -->
  <div class="absolute top-0 left-0 w-96 h-96 bg-white/5 rounded-full blur-3xl"></div>
  <div class="absolute bottom-0 right-0 w-96 h-96 bg-white/5 rounded-full blur-3xl"></div>

  <div class="container mx-auto px-6 relative z-10">
    <!-- Encabezado -->
    <div class="text-center mb-16">
      <div class="inline-flex items-center bg-white/10 backdrop-blur-sm rounded-full px-6 py-2 mb-6">
        <span class="w-2 h-2 bg-white rounded-full mr-2"></span>
        <span class="text-white/90 text-sm font-medium">Resultados Comprobados</span>
      </div>
      <h2 class="text-4xl md:text-5xl font-bold mb-6 text-white stats-title">
        Nuestro Impacto en Números
      </h2>
      <p class="text-xl text-white/80 max-w-3xl mx-auto stats-subtitle font-light">
        Cifras que demuestran nuestro compromiso con la excelencia y la innovación tecnológica
      </p>
    </div>
    
    <!-- Grid de estadísticas -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-8">
      {stats.map((stat, index) => (
        <div class="relative group">
          <div class="stat-card bg-white/10 backdrop-blur-md rounded-2xl p-8 text-center border border-white/10 transition-all duration-300">
            <!-- Valor de la estadística -->
            <div class="relative">
              <div class="text-5xl lg:text-6xl font-bold mb-4 stat-value bg-gradient-to-r from-white to-white/80 bg-clip-text text-transparent" data-value={stat.value}>
                0
              </div>
              <!-- Línea decorativa -->
              <div class="w-12 h-1 bg-white/20 mx-auto mb-4 rounded-full group-hover:w-16 transition-all duration-300"></div>
            </div>
            
            <!-- Etiqueta -->
            <div class="text-lg text-white/80 stat-label font-light">
              {stat.label}
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';
  
  gsap.registerPlugin(ScrollTrigger);
  
  document.addEventListener('DOMContentLoaded', () => {
    // Animación del título y subtítulo
    const tl = gsap.timeline({
      scrollTrigger: {
        trigger: '#estadisticas',
        start: 'top 80%',
        toggleActions: 'play none none reverse'
      }
    });

    tl.from('.stats-title', {
      y: 30,
      opacity: 0,
      duration: 0.8
    })
    .from('.stats-subtitle', {
      y: 20,
      opacity: 0,
      duration: 0.6
    }, '-=0.4');

    // Animación de las tarjetas de estadísticas
    const statCards = document.querySelectorAll('.stat-card');
    
    statCards.forEach((card, index) => {
      gsap.from(card as HTMLElement, {
        y: 30,
        opacity: 0,
        duration: 0.8,
        delay: index * 0.1,
        ease: 'power2.out',
        scrollTrigger: {
          trigger: card,
          start: 'top 85%',
          toggleActions: 'play none none reverse'
        }
      });
    });

    // Animación de los valores
    const statValues = document.querySelectorAll('.stat-value');
    
    statValues.forEach((stat) => {
      const targetValue = parseInt((stat as HTMLElement).dataset.value || '0', 10);
      const formattedStart = '0';
      (stat as HTMLElement).textContent = formattedStart;
      
      ScrollTrigger.create({
        trigger: stat,
        start: 'top 85%',
        onEnter: () => {
          let value = { current: 0 };
          
          gsap.to(value, {
            current: targetValue,
            duration: 2,
            ease: 'power2.out',
            onUpdate: function() {
              const currentValue = Math.round(value.current);
              (stat as HTMLElement).textContent = currentValue.toLocaleString('es-ES');
            }
          });
        },
        onLeaveBack: () => {
          (stat as HTMLElement).textContent = '0';
        }
      });
    });
  });
</script>

<style>
  .bg-noise {
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 400 400' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.8' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
  }

  .stat-card {
    transform: translateY(0);
    will-change: transform;
  }

  .stat-card:hover {
    transform: translateY(-4px);
    background-color: rgba(255, 255, 255, 0.15);
  }

  @media (max-width: 768px) {
    .stat-card:hover {
      transform: none;
    }
  }
</style> 